#include <Arduino.h>

// ---------------------- Forward Declarations ------------------------
void IRAM_ATTR encoderHandler(int i);
void IRAM_ATTR encoderISR0();
void IRAM_ATTR encoderISR1();
void IRAM_ATTR encoderISR2();
void IRAM_ATTR encoderISR3();
void IRAM_ATTR encoderISR4();
void (*getEncoderISR(int index))();

// ---------------------- Motor & Encoder Config ----------------------

const int RELAY_PINS[] = {17, 18, 8, 11, 12};
const int ENCA_PINS[] = {19, 21, 36, 38, 1};
const int ENCB_PINS[] = {20, 35, 37, 39, 2};

// Define pins for high and low side drivers
#define HIN1 4   // Phase A - High side
#define LIN1 10  // Phase A - Low side
#define HIN2 5   // Phase B - High side
#define LIN2 15  // Phase B - Low side
#define HIN3 9  // Phase C - High side
#define LIN3 16  // Phase C - Low side

// Lock pin for enabling the driver (from original DRV2130 code)
#define LOCK_PIN 22

// Gripper Pins
#define GRIPPER_PIN1 13
#define GRIPPER_PIN2 14

// Global Variables
volatile long encoderPulses[5] = {0};
volatile unsigned long lastEncTime[5] = {0};  // For debouncing
const unsigned long DEBOUNCE_MS = 10;

int activeMotor = -1;
int motorDirection = 0;
int motorSpeed = 12;  // Default motor speed (lower = faster)

bool gripperCommandReceived = false;
int gripperState = 0;  // 0=open, 1=close
int gripperTime = 0;

// Task Handles
TaskHandle_t motorTaskHandle, gripperTaskHandle, statusTaskHandle;

// ---------------------- Setup ------------------------

void setup() {
  Serial.begin(115200);
  Serial.println("ESP32-S3 Enhanced Motor Controller");

  for (int i = 0; i < 5; i++) {
    pinMode(RELAY_PINS[i], OUTPUT);
    digitalWrite(RELAY_PINS[i], LOW);
    pinMode(ENCA_PINS[i], INPUT);
    pinMode(ENCB_PINS[i], INPUT);
    attachInterrupt(digitalPinToInterrupt(ENCA_PINS[i]), getEncoderISR(i), CHANGE);
  }

  // Configure all driver pins as outputs
  pinMode(HIN1, OUTPUT);
  pinMode(LIN1, OUTPUT);
  pinMode(HIN2, OUTPUT);
  pinMode(LIN2, OUTPUT);
  pinMode(HIN3, OUTPUT);
  pinMode(LIN3, OUTPUT);
  pinMode(LOCK_PIN, OUTPUT);
  
  // Initial state - all pins low
  digitalWrite(HIN1, LOW);
  digitalWrite(LIN1, LOW);
  digitalWrite(HIN2, LOW);
  digitalWrite(LIN2, LOW);
  digitalWrite(HIN3, LOW);
  digitalWrite(LIN3, LOW);
  
  // Enable the driver
  digitalWrite(LOCK_PIN, HIGH);

  pinMode(GRIPPER_PIN1, OUTPUT);
  pinMode(GRIPPER_PIN2, OUTPUT);
  digitalWrite(GRIPPER_PIN1, LOW);
  digitalWrite(GRIPPER_PIN2, LOW);

  xTaskCreatePinnedToCore(motorTask, "MotorTask", 4096, NULL, 1, &motorTaskHandle, 1);
  xTaskCreatePinnedToCore(gripperTask, "GripperTask", 2048, NULL, 1, &gripperTaskHandle, 1);
  xTaskCreatePinnedToCore(statusReportTask, "StatusReport", 2048, NULL, 1, &statusTaskHandle, 0);
}

void loop() {
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();
    processCommand(cmd);
  }
}

// ---------------------- Command Parser ------------------------

void processCommand(String cmd) {
  cmd.toUpperCase();  // Ensure case insensitivity

  // Motor Control Commands (M1ON to M5ON, M1OFF to M5OFF)
  if (cmd.startsWith("M") && cmd.length() == 3) {
    int motor = cmd.charAt(1) - '1'; // Extract motor number
    int dir = cmd.charAt(2) - '0';   // Extract direction (CW or CCW)
    if (motor >= 0 && motor < 5 && (dir == 0 || dir == 1)) {
      for (int i = 0; i < 5; i++) digitalWrite(RELAY_PINS[i], HIGH); // Turn off all motors first
      digitalWrite(RELAY_PINS[motor], LOW); // Turn the selected motor ON (active low logic)
      activeMotor = motor;
      motorDirection = dir;
      Serial.printf("Motor %d ON %s\n", motor + 1, dir == 0 ? "CW" : "CCW");
    }
  }
  // Motor 1-5 ON/OFF Commands
  else if (cmd.startsWith("M") && cmd.length() >= 4) {
    int motor = cmd.charAt(1) - '1'; // Extract motor number (0-4)
    if (motor >= 0 && motor < 5) {
      if (cmd.endsWith("ON")) {
        digitalWrite(RELAY_PINS[motor], LOW); // Turn motor ON (active low)
        activeMotor = motor;
        Serial.printf("Motor %d ON\n", motor + 1);
      }
      else if (cmd.endsWith("OFF")) {
        digitalWrite(RELAY_PINS[motor], HIGH); // Turn motor OFF (active low)
        if (activeMotor == motor) activeMotor = -1;
        Serial.printf("Motor %d OFF\n", motor + 1);
      }
    }
  }

  // Speed control - format: "SPEED:XX" where XX is delay time in ms
  else if (cmd.startsWith("SPEED:")) {
    int newSpeed = cmd.substring(6).toInt();
    if (newSpeed > 0 && newSpeed <= 100) {
      motorSpeed = newSpeed;
      Serial.printf("Motor speed set to: %d\n", motorSpeed);
    }
  }

  // All Motors ON/OFF
  else if (cmd.startsWith("ALLON")) {
    for (int i = 0; i < 5; i++) {
      digitalWrite(RELAY_PINS[i], LOW); // Turn all motors ON (active low)
    }
    activeMotor = -1;  // No specific active motor
    Serial.println("All motors ON");
  }
  else if (cmd.startsWith("ALLOFF")) {
    for (int i = 0; i < 5; i++) {
      digitalWrite(RELAY_PINS[i], HIGH); // Turn all motors OFF (active low)
    }
    activeMotor = -1;  // No specific active motor
    Serial.println("All motors OFF");
  }

  // Gripper Control Commands
  else if (cmd.startsWith("GRIPPEROPEN")) {
    digitalWrite(GRIPPER_PIN1, HIGH); // Open the gripper
    digitalWrite(GRIPPER_PIN2, LOW);  // Open the gripper
    Serial.println("Gripper OPEN");
  }
  else if (cmd.startsWith("GRIPPERCLOSE")) {
    digitalWrite(GRIPPER_PIN1, LOW);  // Close the gripper
    digitalWrite(GRIPPER_PIN2, HIGH); // Close the gripper
    Serial.println("Gripper CLOSE");
  }
  
  // Gripper with Timed Control
  else if (cmd.startsWith("C") && cmd.indexOf("T") > 1) {
    int tIndex = cmd.indexOf("T");
    gripperState = cmd.substring(1, tIndex).toInt();
    gripperTime = cmd.substring(tIndex + 1).toInt();
    if ((gripperState == 0 || gripperState == 1) && gripperTime > 0) {
      gripperCommandReceived = true;
      Serial.printf("Gripper Command: %s for %d sec\n", gripperState ? "CLOSE" : "OPEN", gripperTime);
    }
  }
}

// ---------------------- Motor Task ------------------------

void motorTask(void* pvParameters) {
  while (1) {
    if (activeMotor != -1) {
      // Run the enhanced 6-step commutation sequence
      motorControl(motorDirection, motorSpeed);
      vTaskDelay(pdMS_TO_TICKS(1)); // Short delay to allow other tasks to run
    } else {
      // All pins low when no motor active
      digitalWrite(HIN1, LOW);
      digitalWrite(LIN1, LOW);
      digitalWrite(HIN2, LOW);
      digitalWrite(LIN2, LOW);
      digitalWrite(HIN3, LOW);
      digitalWrite(LIN3, LOW);
      vTaskDelay(pdMS_TO_TICKS(100));
    }
  }
}

// Enhanced motor control function implementing the 6-step commutation sequence
// dir: 0 for clockwise, 1 for counterclockwise
// vel: delay time in milliseconds (lower = faster rotation)
void motorControl(int dir, int vel) {
  // Make sure driver is enabled
  digitalWrite(LOCK_PIN, HIGH);
  
  if (dir == 0) {
    // Clockwise sequence
    
    // Step 1
    digitalWrite(HIN1, HIGH);
    digitalWrite(LIN1, LOW);
    digitalWrite(HIN2, LOW);
    digitalWrite(LIN2, HIGH);
    digitalWrite(HIN3, LOW);
    digitalWrite(LIN3, LOW);
    vTaskDelay(pdMS_TO_TICKS(vel));
    
    // Step 2
    digitalWrite(HIN1, HIGH);
    digitalWrite(LIN1, LOW);
    digitalWrite(HIN2, LOW);
    digitalWrite(LIN2, LOW);
    digitalWrite(HIN3, LOW);
    digitalWrite(LIN3, HIGH);
    vTaskDelay(pdMS_TO_TICKS(vel));
    
    // Step 3
    digitalWrite(HIN1, LOW);
    digitalWrite(LIN1, LOW);
    digitalWrite(HIN2, HIGH);
    digitalWrite(LIN2, LOW);
    digitalWrite(HIN3, LOW);
    digitalWrite(LIN3, HIGH);
    vTaskDelay(pdMS_TO_TICKS(vel));
    
    // Step 4
    digitalWrite(HIN1, LOW);
    digitalWrite(LIN1, HIGH);
    digitalWrite(HIN2, HIGH);
    digitalWrite(LIN2, LOW);
    digitalWrite(HIN3, LOW);
    digitalWrite(LIN3, LOW);
    vTaskDelay(pdMS_TO_TICKS(vel));
    
    // Step 5
    digitalWrite(HIN1, LOW);
    digitalWrite(LIN1, HIGH);
    digitalWrite(HIN2, LOW);
    digitalWrite(LIN2, LOW);
    digitalWrite(HIN3, HIGH);
    digitalWrite(LIN3, LOW);
    vTaskDelay(pdMS_TO_TICKS(vel));
    
    // Step 6
    digitalWrite(HIN1, LOW);
    digitalWrite(LIN1, LOW);
    digitalWrite(HIN2, LOW);
    digitalWrite(LIN2, HIGH);
    digitalWrite(HIN3, HIGH);
    digitalWrite(LIN3, LOW);
    vTaskDelay(pdMS_TO_TICKS(vel));
  }
  else {
    // Counterclockwise sequence
    
    // Step 1
    digitalWrite(HIN1, HIGH);
    digitalWrite(LIN1, LOW);
    digitalWrite(HIN2, LOW);
    digitalWrite(LIN2, LOW);
    digitalWrite(HIN3, LOW);
    digitalWrite(LIN3, HIGH);
    vTaskDelay(pdMS_TO_TICKS(vel));
    
    // Step 2
    digitalWrite(HIN1, HIGH);
    digitalWrite(LIN1, LOW);
    digitalWrite(HIN2, LOW);
    digitalWrite(LIN2, HIGH);
    digitalWrite(HIN3, LOW);
    digitalWrite(LIN3, LOW);
    vTaskDelay(pdMS_TO_TICKS(vel));
    
    // Step 3
    digitalWrite(HIN1, LOW);
    digitalWrite(LIN1, LOW);
    digitalWrite(HIN2, HIGH);
    digitalWrite(LIN2, LOW);
    digitalWrite(HIN3, LOW);
    digitalWrite(LIN3, HIGH);
    vTaskDelay(pdMS_TO_TICKS(vel));
    
    // Step 4
    digitalWrite(HIN1, LOW);
    digitalWrite(LIN1, HIGH);
    digitalWrite(HIN2, HIGH);
    digitalWrite(LIN2, LOW);
    digitalWrite(HIN3, LOW);
    digitalWrite(LIN3, LOW);
    vTaskDelay(pdMS_TO_TICKS(vel));
    
    // Step 5
    digitalWrite(HIN1, LOW);
    digitalWrite(LIN1, HIGH);
    digitalWrite(HIN2, LOW);
    digitalWrite(LIN2, LOW);
    digitalWrite(HIN3, HIGH);
    digitalWrite(LIN3, LOW);
    vTaskDelay(pdMS_TO_TICKS(vel));
    
    // Step 6
    digitalWrite(HIN1, LOW);
    digitalWrite(LIN1, LOW);
    digitalWrite(HIN2, LOW);
    digitalWrite(LIN2, HIGH);
    digitalWrite(HIN3, HIGH);
    digitalWrite(LIN3, LOW);
    vTaskDelay(pdMS_TO_TICKS(vel));
  }
}

// ---------------------- Gripper Task ------------------------

void gripperTask(void* pvParameters) {
  while (1) {
    if (gripperCommandReceived) {
      digitalWrite(GRIPPER_PIN1, gripperState == 1 ? HIGH : LOW);
      digitalWrite(GRIPPER_PIN2, gripperState == 0 ? HIGH : LOW);
      vTaskDelay(pdMS_TO_TICKS(gripperTime * 1000));
      digitalWrite(GRIPPER_PIN1, LOW);
      digitalWrite(GRIPPER_PIN2, LOW);
      gripperCommandReceived = false;
    }
    vTaskDelay(pdMS_TO_TICKS(10));
  }
}

// ---------------------- Encoder ISRs & Handler ------------------------

void IRAM_ATTR encoderHandler(int i) {
  // Only count encoder if this motor is active
  if (i == activeMotor) {
    unsigned long now = millis();
    if (now - lastEncTime[i] >= DEBOUNCE_MS) {
      int A = digitalRead(ENCA_PINS[i]);
      int B = digitalRead(ENCB_PINS[i]);
      if (A == B) encoderPulses[i]++;
      else encoderPulses[i]--;
      lastEncTime[i] = now;
    }
  }
}


void IRAM_ATTR encoderISR0() { encoderHandler(0); }
void IRAM_ATTR encoderISR1() { encoderHandler(1); }
void IRAM_ATTR encoderISR2() { encoderHandler(2); }
void IRAM_ATTR encoderISR3() { encoderHandler(3); }
void IRAM_ATTR encoderISR4() { encoderHandler(4); }

void (*getEncoderISR(int index))() {
  switch (index) {
    case 0: return encoderISR0;
    case 1: return encoderISR1;
    case 2: return encoderISR2;
    case 3: return encoderISR3;
    case 4: return encoderISR4;
    default: return NULL;
  }
}

// ---------------------- Status Reporting ------------------------

void statusReportTask(void* pvParameters) {
  while (1) {
    Serial.print("Motor: ");
    Serial.print(activeMotor != -1 ? activeMotor + 1 : 0);
    Serial.print(" | Dir: ");
    Serial.print(motorDirection == 0 ? "CW" : "CCW");
    Serial.print(" | Speed: ");
    Serial.print(motorSpeed);
    Serial.print(" | Encoders: ");
    for (int i = 0; i < 5; i++) {
      Serial.printf("M%d: %ld ", i + 1, encoderPulses[i]);
    }
    Serial.println();
    vTaskDelay(pdMS_TO_TICKS(1000));
  }
}
