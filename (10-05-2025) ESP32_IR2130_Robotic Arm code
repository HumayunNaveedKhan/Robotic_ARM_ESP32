#include "Arduino.h"

// IR2130 Gate Driver pins
#define HIN1 19  // High-side pin for phase A
#define HIN2 18  // High-side pin for phase B
#define HIN3 5  // High-side pin for phase C
#define LIN1 17  // Low-side pin for phase A
#define LIN2 16  // Low-side pin for phase B
#define LIN3 4  // Low-side pin for phase C
#define lock 22  // Lock output control pin (Active LOW)

// Relay pins for motor control (Active LOW)
#define RELAY1 26  // Relay for motor 1
#define RELAY2 27  // Relay for motor 2
#define RELAY3 14  // Relay for motor 3
#define RELAY4 12  // Relay for motor 4
#define RELAY5 13  // Relay for motor 5

// Motor states (on/off and direction)
bool motorOn[5] = {false, false, false, false, false};  // Motor ON/OFF status
int motorDir[5] = {0, 0, 0, 0, 0};  // Motor direction (0 = CW, 1 = CCW)

String inputString = "";      // Holds incoming serial data
bool stringComplete = false;  // Whether the string is complete

void setup() {
  Serial.begin(115200);
  inputString.reserve(20);

  // Set all pins to OUTPUT mode
  pinMode(lock, OUTPUT);
  pinMode(HIN1, OUTPUT);
  pinMode(HIN2, OUTPUT);
  pinMode(HIN3, OUTPUT);
  pinMode(LIN1, OUTPUT);
  pinMode(LIN2, OUTPUT);
  pinMode(LIN3, OUTPUT);

  pinMode(RELAY1, OUTPUT);
  pinMode(RELAY2, OUTPUT);
  pinMode(RELAY3, OUTPUT);
  pinMode(RELAY4, OUTPUT);
  pinMode(RELAY5, OUTPUT);

  // Set all to OFF state (inactive)
  digitalWrite(lock, HIGH);  // Inactive (active LOW)
  digitalWrite(HIN1, LOW);
  digitalWrite(HIN2, LOW);
  digitalWrite(HIN3, LOW);
  digitalWrite(LIN1, LOW);
  digitalWrite(LIN2, LOW);
  digitalWrite(LIN3, LOW);

  digitalWrite(RELAY1, HIGH);
  digitalWrite(RELAY2, HIGH);
  digitalWrite(RELAY3, HIGH);
  digitalWrite(RELAY4, HIGH);
  digitalWrite(RELAY5, HIGH);

  Serial.println("Motor Control Ready");
  Serial.println("Commands:");
  Serial.println("M1ON/m1on - Turn motor 1 ON");
  Serial.println("M1OFF/m1off - Turn motor 1 OFF");
  Serial.println("M10/m10 - Set motor 1 Clockwise");
  Serial.println("M11/m11 - Set motor 1 Counter-Clockwise");
  Serial.println("(Same pattern for motors 2-5)");
  Serial.println("ALLON/allon - Turn all motors ON");
  Serial.println("ALLOFF/alloff - Turn all motors OFF");
}

void loop() {
  if (stringComplete) {
    processCommand(inputString);
    inputString = "";
    stringComplete = false;
  }

  for (int i = 0; i < 5; i++) {
    if (motorOn[i]) {
      digitalWrite(getRelayPin(i), LOW);  // Active LOW = ON
      digitalWrite(lock, LOW);  // Engage lock (active LOW)
      motorControl(motorDir[i], 12);
    } else {
      digitalWrite(getRelayPin(i), HIGH);  // Deactivate relay
    }
  }
}

int getRelayPin(int motorIndex) {
  switch (motorIndex) {
    case 0: return RELAY1;
    case 1: return RELAY2;
    case 2: return RELAY3;
    case 3: return RELAY4;
    case 4: return RELAY5;
    default: return -1;
  }
}

void processCommand(String command) {
  command.trim();
  command.toUpperCase();

  Serial.print("Command received: ");
  Serial.println(command);

  for (int i = 1; i <= 5; i++) {
    String motorNum = String(i);
    if (command == "M" + motorNum + "ON") {
      motorOn[i - 1] = true;
      Serial.println("Motor " + motorNum + " turned ON");
      return;
    }
    if (command == "M" + motorNum + "OFF") {
      motorOn[i - 1] = false;
      Serial.println("Motor " + motorNum + " turned OFF");
      return;
    }
    if (command == "M" + motorNum + "0") {
      motorDir[i - 1] = 0;
      Serial.println("Motor " + motorNum + " set to Clockwise");
      return;
    }
    if (command == "M" + motorNum + "1") {
      motorDir[i - 1] = 1;
      Serial.println("Motor " + motorNum + " set to Counter-Clockwise");
      return;
    }
  }

  if (command == "ALLON") {
    for (int i = 0; i < 5; i++) motorOn[i] = true;
    Serial.println("All motors turned ON");
    return;
  }

  if (command == "ALLOFF") {
    for (int i = 0; i < 5; i++) motorOn[i] = false;
    Serial.println("All motors turned OFF");
    return;
  }

  Serial.println("Unknown command");
}

void serialEvent() {
  while (Serial.available()) {
    char inChar = (char)Serial.read();
    if (inChar != '\n' && inChar != '\r') inputString += inChar;
    if (inChar == '\n') stringComplete = true;
  }
}

// Motor stepping sequence
void motorControl(int dir, int vel) {
  int delTime = vel;

  if (dir == 0) {
    delay(delTime);
    digitalWrite(HIN1, LOW); digitalWrite(LIN1, HIGH);
    delay(delTime);
    digitalWrite(HIN2, HIGH); digitalWrite(LIN2, LOW);
    delay(delTime);
    digitalWrite(HIN3, LOW); digitalWrite(LIN3, HIGH);
    delay(delTime);
    digitalWrite(HIN1, HIGH); digitalWrite(LIN1, LOW);
    delay(delTime);
    digitalWrite(HIN2, LOW); digitalWrite(LIN2, HIGH);
    delay(delTime);
    digitalWrite(HIN3, HIGH); digitalWrite(LIN3, LOW);
  } else if (dir == 1) {
    delay(delTime);
    digitalWrite(HIN1, LOW); digitalWrite(LIN1, HIGH);
    delay(delTime);
    digitalWrite(HIN3, HIGH); digitalWrite(LIN3, LOW);
    delay(delTime);
    digitalWrite(HIN2, LOW); digitalWrite(LIN2, HIGH);
    delay(delTime);
    digitalWrite(HIN1, HIGH); digitalWrite(LIN1, LOW);
    delay(delTime);
    digitalWrite(HIN3, LOW); digitalWrite(LIN3, HIGH);
    delay(delTime);
    digitalWrite(HIN2, HIGH); digitalWrite(LIN2, LOW);
  }
}
